---
description: Better-T-Stack Project Rules and Guidelines
globs: "**/*"
alwaysApply: true
---

# Better-T-Stack Project Rules

This is a magick-template project created with Better-T-Stack CLI using SvelteKit, ElysiaJS, Bun, and Turborepo.

## Project Structure

This is a Turborepo monorepo with the following structure:

- **`apps/server/`** - Backend server (ElysiaJS with TypeScript)
- **`apps/web/`** - Frontend application (SvelteKit with TypeScript)
- **`packages/`** - Shared packages and utilities
- **Root** - Monorepo configuration and shared tooling

## Development Workflow

### Available Scripts
- `bun run dev` - Start all apps in development mode
- `bun run dev:server` - Start only the backend server
- `bun run dev:web` - Start only the frontend application
- `bun run build` - Build all packages and applications
- `bun run lint` - Run linting across all workspaces
- `bun run type-check` - Run TypeScript type checking

### Database Commands
All database operations should be run from the server workspace (`apps/server/`):

- `bun run db:push` - Push schema changes to database
- `bun run db:studio` - Open database studio interface
- `bun run db:generate` - Generate database client files
- `bun run db:migrate` - Run database migrations
- `bun run db:seed` - Seed database with initial data

Database models and schemas are located in `apps/server/src/db/`

## Architecture Guidelines

### API Structure
- API endpoints are defined in `apps/server/src/api/`
- Use ElysiaJS routing and middleware patterns
- Client-side API utilities are in `apps/web/src/lib/api/`
- Follow RESTful conventions and proper HTTP status codes

### Authentication & Authorization
- Server auth logic is in `apps/server/src/lib/auth/`
- Client auth utilities are in `apps/web/src/lib/auth/`
- Use proper session management and security practices
- Implement CSRF protection and secure headers

### Frontend Guidelines
- Components are in `apps/web/src/lib/components/`
- Routes follow SvelteKit file-based routing in `apps/web/src/routes/`
- Use Svelte 5 runes for state management
- Implement proper error boundaries and loading states

### Shared Code
- Shared types and utilities go in `packages/`
- Use TypeScript for all shared interfaces
- Export types and utilities properly for consumption

## Code Organization Rules

### File Naming Conventions
- Use kebab-case for file and directory names
- Use PascalCase for component files (`.svelte`)
- Use camelCase for utility functions and variables
- Use SCREAMING_SNAKE_CASE for constants

### Import/Export Patterns
- Use absolute imports with proper path mapping
- Group imports: external libraries, internal modules, relative imports
- Use named exports over default exports for utilities
- Use default exports for components and pages

### Error Handling
- Implement proper error boundaries in SvelteKit
- Use ElysiaJS error handling middleware
- Log errors appropriately (server-side only)
- Provide user-friendly error messages

## Monorepo Best Practices

### Workspace Management
- Each app has its own `package.json` and dependencies
- Shared dependencies should be hoisted to root when possible
- Use workspace protocol (`workspace:*`) for internal dependencies
- Don't duplicate dependencies across workspaces unnecessarily

### Build and Deployment
- Turborepo handles build caching and parallel execution
- Configure proper build dependencies in `turbo.json`
- Use consistent build outputs across all packages
- Implement proper CI/CD pipeline considerations

### Development Environment
- Use consistent Node.js/Bun versions across team
- Configure proper environment variables per workspace
- Use `.env.example` files for environment documentation
- Don't commit sensitive environment variables

## Adding Features and Extensions

### CLI Extensions
Add additional features using the Better-T-Stack CLI:

```bash
bunx create-better-t-stack add
```

Available addon categories:
- **Documentation**: Starlight, Fumadocs
- **Linting**: Biome, Oxlint, Ultracite
- **Testing**: Vitest, Playwright, Jest
- **Deployment**: Cloudflare, Vercel, Docker
- **Other**: PWA, Tauri, Husky, vibe-rules

### Configuration Management
- `bts.jsonc` stores your Better-T-Stack configuration
- Contains selected stack options (database, ORM, backend, frontend)
- Used by CLI to understand project structure
- Updated automatically when using `add` command
- Safe to delete if CLI features not needed

## Performance and Optimization

### Frontend Optimization
- Use SvelteKit's built-in code splitting
- Implement proper lazy loading for routes and components
- Optimize images and static assets
- Use proper caching strategies

### Backend Optimization
- Implement proper database indexing
- Use connection pooling for database connections
- Implement request/response caching where appropriate
- Monitor and optimize API response times

### Build Optimization
- Leverage Turborepo's caching for faster builds
- Use proper build parallelization
- Optimize bundle sizes and tree shaking
- Implement proper asset optimization

## Security Guidelines

### General Security
- Validate all inputs on both client and server
- Implement proper CORS policies
- Use HTTPS in production environments
- Keep dependencies updated and audit regularly

### Authentication Security
- Use secure session management
- Implement proper password hashing
- Use CSRF tokens for state-changing operations
- Implement rate limiting for auth endpoints

### Data Security
- Sanitize database queries to prevent injection
- Don't expose sensitive data in API responses
- Use proper access controls and permissions
- Implement audit logging for sensitive operations